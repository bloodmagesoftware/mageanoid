name: Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write
  packages: write

env:
  # update with the name of the main binary
  binary: mageanoid
  add_binaries_to_github_release: true
  itch_target: bloodmagesoftware/mageanoid

  # Before enabling LFS, please take a look at GitHub's documentation for costs and quota limits:
  # https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-storage-and-bandwidth-usage
  use_git_lfs: false

jobs:
  # Build for Linux
  release-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: install dependencies
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev

      - name: Build
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu --features "storage"

      - name: Prepare package
        run: |
          mkdir linux
          cp target/x86_64-unknown-linux-gnu/release/${{ env.binary }} linux/
          cp -r assets linux/ || true # Try to copy, but ignore if it can't copy if source directory does not exist

      - name: Package as a zip
        working-directory: ./linux
        run: |
          zip --recurse-paths ../${{ env.binary }}.zip .

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: linux
          retention-days: 1

      - name: Upload executable to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: linux/${{ env.binary }}
          name: linux-executable
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-linux-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for Windows
  release-windows:
    runs-on: windows-latest

    steps:
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build
        run: |
          cargo build --release --target x86_64-pc-windows-msvc --features "storage"

      - name: Prepare package
        run: |
          mkdir windows
          cp target/x86_64-pc-windows-msvc/release/${{ env.binary }}.exe windows/
          mkdir assets -ea 0 # create the assets directory if it does not exist, it will get ignored in the zip if empty
          cp -r assets windows/

      - name: Package as a zip
        run: |
          Compress-Archive -Path windows/* -DestinationPath ${{ env.binary }}.zip

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}.zip
          name: windows
          retention-days: 1

      - name: Upload executable to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: windows/${{ env.binary }}.exe
          name: windows-executable
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.zip
          asset_name: ${{ env.binary }}-windows-${{ steps.get_version.outputs.tag }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS x86_64
  release-macOS-intel:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
      - name: Environment Setup
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"

      - name: Build
        run: |
          cargo build --release --target x86_64-apple-darwin --features "storage"

      - name: Prepare Package
        run: |
          mkdir -p dist/${{ env.binary }}.app/Contents/MacOS
          cp target/x86_64-apple-darwin/release/${{ env.binary }} dist/${{ env.binary }}.app/Contents/MacOS/
          cp -r assets dist/${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
          ln -s /Applications dist/Applications
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder dist ${{ env.binary }}-macOS-intel.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macOS-intel.dmg
          name: macOS-intel
          retention-days: 1

      - name: Upload executable to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: target/x86_64-apple-darwin/release/${{ env.binary }}
          name: mac-x86-executable
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-intel.dmg
          asset_name: ${{ env.binary }}-macOS-intel-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  # Build for MacOS Apple Silicon
  release-macOS-apple-silicon:
    runs-on: macOS-latest

    steps:
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version
      - uses: actions/checkout@v4
        with:
          lfs: ${{ env.use_git_lfs }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin
      - name: Environment
        # macOS 11 was the first version to support ARM
        run: |
          export MACOSX_DEPLOYMENT_TARGET="11"

      - name: Build
        run: |
          cargo build --release --target aarch64-apple-darwin --features "storage"

      - name: Prepare Package
        run: |
          mkdir -p dist/${{ env.binary }}.app/Contents/MacOS
          cp target/aarch64-apple-darwin/release/${{ env.binary }} dist/${{ env.binary }}.app/Contents/MacOS/
          cp -r assets dist/${{ env.binary }}.app/Contents/MacOS/ || true # Try to copy, but ignore if it can't copy if source directory does not exist
          hdiutil create -fs HFS+ -volname "${{ env.binary }}-macOS-apple-silicon" -srcfolder dist ${{ env.binary }}-macOS-apple-silicon.dmg

      - name: Upload binaries to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.binary }}-macOS-apple-silicon.dmg
          name: macOS-apple-silicon
          retention-days: 1

      - name: Upload executable to artifacts
        uses: actions/upload-artifact@v4
        with:
          path: target/aarch64-apple-darwin/release/${{ env.binary }}
          name: mac-arm-executable
          retention-days: 1

      - name: Upload binaries to release
        if: ${{ env.add_binaries_to_github_release == 'true' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}-macOS-apple-silicon.dmg
          asset_name: ${{ env.binary }}-macOS-apple-silicon-${{ steps.get_version.outputs.tag }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  check-if-upload-to-itch-is-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-itch-target }}
    steps:
      - id: check-env
        run: |
          if [[ -z "$itch_target" ]]; then
            echo "has-itch-target=no" >> $GITHUB_OUTPUT
          else
            echo "has-itch-target=yes" >> $GITHUB_OUTPUT
          fi

  check-if-upload-to-steam-it-configured:
    runs-on: ubuntu-latest
    outputs:
      should-upload: ${{ steps.check-env.outputs.has-steam-app-id }}
    steps:
      - id: check-env
        env:
          steam_app_id: ${{ secrets.STEAM_APP_ID }}
        run: |
          if [[ -z "$steam_app_id" ]]; then
            echo "has-steam-app-id=no" >> $GITHUB_OUTPUT
          else
            echo "has-steam-app-id=yes" >> $GITHUB_OUTPUT
          fi

  upload-to-itch:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-itch-is-configured
      - release-linux
      - release-windows
      - release-macOS-intel
      - release-macOS-apple-silicon
    if: ${{ needs.check-if-upload-to-itch-is-configured.outputs.should-upload == 'yes' }}

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./builds

      - name: Install butler
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
          unzip butler.zip
          chmod +x butler
          ./butler -V
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version
      - name: Upload to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        run: |
          for channel in $(ls builds); do
            ./butler push \
                --fix-permissions \
                --userversion="${{ steps.get_version.outputs.tag }}" \
                builds/$channel/* \
                ${{ env.itch_target }}:$channel
          done


  upload-to-steam:
    runs-on: ubuntu-latest
    needs:
      - check-if-upload-to-steam-it-configured
      - release-linux
      - release-windows
      - release-macOS-intel
      - release-macOS-apple-silicon
    if: ${{ needs.check-if-upload-to-steam-it-configured.outputs.should-upload == 'yes' }}

    steps:
      - uses: olegtarasov/get-tag@2.1.3
        id: get_version

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          path: source
          lfs: ${{ env.use_git_lfs }}

      - name: Dist folder
        run: mkdir -p dist

      - name: Download Linux executable
        uses: actions/download-artifact@v4
        with:
          name: linux-executable
          path: linux-executable
      - name: Rename Linux executable
        run: |
          mv /mageanoid dist/mageanoid_linux_x86
          chmod 777 dist/mageanoid_linux_x86
          rm -rf linux-executable

      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: windows-executable
          path: windows-executable
      - name: Rename Windows executable
        run: |
          mv windows-executable/mageanoid.exe dist/mageanoid.exe
          rm -rf windows-executable

      - name: Download MacOS x86 executables
        uses: actions/download-artifact@v4
        with:
          name: mac-x86-executable
          path: mac-x86-executable
      - name: Rename MacOS executables
        run: |
          mv mac-x86-executable/mageanoid dist/mageanoid_mac_x86
          chmod 777 dist/mageanoid_mac_x86
          rm -rf mac-x86-executable

      - name: Download MacOS Apple Silicon executables
        uses: actions/download-artifact@v4
        with:
          name: mac-arm-executable
          path: mac-arm-executable
      - name: Rename MacOS Apple Silicon executables
        run: |
          mv mac-arm-executable/mageanoid dist/mageanoid_mac_arm
          chmod 777 dist/mageanoid_mac_arm
          rm -rf mac-arm-executable

      - name: Move assets to dist
        run: mv source/assets dist

      - name: Upload to Steam
        uses: game-ci/steam-deploy@v3
        with:
          username: ${{ secrets.STEAM_USERNAME }}
          configVdf: ${{ secrets.STEAM_CONFIG_VDF}}
          appId: ${{ secrets.STEAM_APP_ID }}
          buildDescription: "Build ${{ steps.get_version.outputs.tag }}"
          rootPath: dist
          depot1Path: .
          releaseBranch: rc
